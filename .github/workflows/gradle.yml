name: Java CI with Gradle

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      

      ## create application-prod.properties
      - name: make application-prod.properties
        if: contains(github.ref, 'main') # branch가 main 일 때, 나머지는 위와 동일
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t seonghwa/nugget .
          docker push seonghwa/nugget
      

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.9
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker stop nugget
            sudo docker rm nugget
            sudo docker pull seonghwa/nugget
            sudo docker run -d -p 8080:8080 --name nugget seonghwa/nugget
            sudo docker image prune -f
